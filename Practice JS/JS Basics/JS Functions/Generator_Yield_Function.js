/*
    What is a generator function and 'yield' in JS?

    The yield keyword is used in JavaScript generator functions to pause and resume the execution 
    of a function. When yield is encountered in a generator function, the function's execution is 
    paused, and the value following the yield keyword is returned to the function's caller.
    
    Generator functions are special functions that can be used to generate sequences of values. 
    They are often used in conjunction with iterators, which are objects that can be used to loop 
    over a sequence of values


*/

function* myGenerator() {
  // Generator function
  yield 1;
  yield 2;
  yield 3;
}

const iterator = myGenerator();

console.log(iterator.next()); // { value: 1, done: false }
console.log(iterator.next()); // { value: 2, done: false }
console.log(iterator.next()); // { value: 3, done: false }
console.log(iterator.next()); // { value: undefined, done: true }

/*
    'myGenerator' generator function simply yields the numbers 1, 2, and 3. To iterate over the values 
    generated by the generator function, we can use an iterator:

    The iterator object returns an object with two properties: value and done. The value property 
    contains the next value generated by the generator function, and the done property is a 
    boolean value that indicates whether the generator function has finished generating values.
*/

/*
    USAGE:
    Generator functions can be used in a variety of ways. For example, they can be used to implement 
    lazy loading, which is a technique that can be used to improve the performance of applications. 
    Generator functions can also be used to implement coroutines, which are a type of function that 
    can be used to implement cooperative multitasking.
*/

// Another Generator function
// Generate Function generates an
// infinite series of Natural Numbers
function* nextNatural() {
  let naturalNumber = 1;

  // Infinite Generation
  while (true) {
    yield naturalNumber++;
  }
}

// Calling the Generate Function
let gen = nextNatural();

// Loop to print the first
// 10 Generated number
for (let i = 0; i < 10; i++) {
  // Generating Next Number
  console.log(gen.next().value);
}

/*
    Generator-Function: A generator-function is defined like a normal function, but whenever 
    it needs to generate a value, it does so with the yield keyword rather than return. The yield 
    statement suspends the functionâ€™s execution and sends a value back to the caller, but retains 
    enough state to enable the function to resume where it is left off. When resumed, the function 
    continues execution immediately after the last yield run. 
*/

/*
    Yield vs Yield*
    
    yield: pauses the generator execution and returns the value of the expression which is being 
    written after the yield keyword. 
    
    yield*: it iterates over the operand and returns each value until done is true.
*/

const arr = ["a", "b", "c"];

function* generator() {
  yield 1;
  yield* arr;
  yield 2;
}

for (let value of generator()) {
  console.log(value);
}
